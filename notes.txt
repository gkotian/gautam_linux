---------------------------------------------------------------------------------------------------

Additional softwares after a fresh Linux installation:

    super-boot-manager (http://www.sourceslist.eu/projects/super-boot-manager)
        sudo add-apt-repository ppa:ingalex/super-boot-manager
        sudo apt-get update
        sudo apt-get install super-boot-manager

---------------------------------------------------------------------------------------------------

running a simple HTTP server:
(http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python)
python -m SimpleHTTPServer

connect using: http://127.0.0.1:8000/tmp

---------------------------------------------------------------------------------------------------

Installing perl modules:
------------------------
Many perl scripts use modules (e.g. `use Archive::Ar;`). To install missing modules, use cpanm.
    - sudo apt-get install cpanminus
    - cpanm Archive::Ar
cpanm would normally automatically install all the dependencies also. Without 'sudo' installation
will happen to a directory in your home directory (e.g. /home/gautam/perl5).
Sometimes, installation fails (usually because some dependency could not be automatically
installed). In this case, find the dependency whose installation failed (using the log file whose
location would be helpfully indicated by cpanm) and install the dependency manually. For example, if
'Test::Exception' is a dependency whose automatic installation failed, then just run
    - cpanm Test::Exception
Then retry the original installation.

Finally, to run the perl script that was using the newly installed modules, you need to specify the
location of the newly installed modules using,
    - export PERL5LIB=/home/gautam/perl5/lib/perl5

---------------------------------------------------------------------------------------------------

To cut the last field (using space as delimiter):
    awk -F" " '{print $NF}'
        OR
    rev | cut -d" " -f1 | rev

---------------------------------------------------------------------------------------------------

Alternative way to do:
    for file in `ls`; do echo $file; done
is:
    ls | while read file; do echo $file; done

---------------------------------------------------------------------------------------------------

copy contents of a file into the clipboard:
-------------------------------------------
    ⁠⁠⁠⁠cat file | xclip -selection coard

---------------------------------------------------------------------------------------------------

list files with blank lines at the end:
---------------------------------------
    for F in `ls {src,test}/**/*.d`; do S=$(tail -1 ${F}); [ -z ${S} ] && echo ${F}; done

---------------------------------------------------------------------------------------------------

To get the sizes of files (without an overwhelming amount of output), use:
    du -ckhs *
    (I don't yet know the reason for the 'k', as 'du -chs *' seems to give the same output)

---------------------------------------------------------------------------------------------------

To get the amount of disk space used & free:
    df -hT | egrep -i "file|^/"

---------------------------------------------------------------------------------------------------

To grep for tabs in a file
    grep $'\t' <filename>

---------------------------------------------------------------------------------------------------

The output of 'echo' can be controlled by using certain "Terminfo Capabilities", e.g:
    prompt$> tput smso; echo "hello world"; tput rmso
(more here: http://tldp.org/LDP/lpg/node126.html)

---------------------------------------------------------------------------------------------------

To run a command at startup, there are 2 options:
    1. sudo crontab -e
       add the following in the end:
           @reboot <<command_to_run>>
      OR
    2. create a script file with your command
       make the script executable
       sudo /etc/rc.local
       path to your script at the end just above exit 0
So what's the difference?
    For the most part they're equivalent. The part where they differ is precisely when they run the
    command. /etc/rc.local is the last item to run, after all the other services have started.
    I don't yet know when @reboot runs.

---------------------------------------------------------------------------------------------------

[15:47:45] Nemanja Boric: btw, good thing for debugging: setarch i686 -R gdb ./program
[15:47:51] Nemanja Boric: removes address randomization

---------------------------------------------------------------------------------------------------

To cherry-pick all commits on a branch on top of another branch:
----------------------------------------------------------------

    Goal: cherry-pick source_branch commits over target_branch
          (i.e. commits Cy & Cz over commit C6)

               C6 o           => target_branch
                  |
               C5 o  o Cz     => source_branch
                  |  |
               C4 o  o Cy
                  |  |
               C3 o  o Cx     => some_intermediate_branch
                  |  |
               C2 o---
                  |
               C1 o

    1. git checkout target_branch
    2. git rebase --onto HEAD Cx source_branch
           (commit Cx will not be picked - only commits Cy & Cz will be picked and applied above
           commit C6)
           (if instead of source_branch, only the commit hash was used, i.e. Cz, then source_branch
           will not be moved from its original location)

---------------------------------------------------------------------------------------------------

Setting date from the command-line:
-----------------------------------
    sudo date MMDDHHMMYYYY.SS
              |     |
            month  minutes

---------------------------------------------------------------------------------------------------

Expandable GitHub comments:

<details>
  <summary>Click to expand</summary>
                                             <--- this blank line is necessary for proper formatting
  whatever
</details>

---------------------------------------------------------------------------------------------------

Installing a package on Arch Linux from AUR:
--------------------------------------------
    - download the package archive from AUR ("Download snapshot" link in the
      "Package Actions" box on the right) to `~/aur`
    - extract the archive, then delete it
    - cd to the extracted directory
    - makepkg -Acs
    - sudo pacman -U <tar.xz>

---------------------------------------------------------------------------------------------------

If you need to use different GitHub accounts on the same computer:
------------------------------------------------------------------
    The idea is to present different ssh keys to GitHub for the different
    accounts.

    - use different git remote URLs of the form:
          git@github-BLAH:...
          (where BLAH is a decent descriptive string)
    - add a section in `~/.ssh/config` of the form:
      ```
      Host github-BLAH
          Hostname github.com
          User git
          IdentityFile ~/.ssh/id_ed25519_blah   <-- path to proper ssh key
          IdentitiesOnly yes
      ```

    This may be helpful if you run into problems:
    http://code.tutsplus.com/tutorials/how-to-work-with-github-and-multiple-accounts--net-22574

---------------------------------------------------------------------------------------------------

Run gofmt:
    docker run --rm -it -v "${PWD}:/go/src" golang:alpine3.11 /bin/sh -c 'cd /go/src && gofmt -s -w .'

---------------------------------------------------------------------------------------------------

To run an SFTP server in a docker container:
--------------------------------------------
    USERNAME="user"
    PASSWORD="password"
    HOST_DIR_TO_SHARE="/path/to/shared/directory"
    DIR_IN_CONTAINER="/home/${USERNAME}/share"

    docker run -d -v "${HOST_DIR_TO_SHARE}:${DIR_IN_CONTAINER}" -p "2222:22" atmoz/sftp:alpine ${USERNAME}:${PASSWORD}:1001

    testing:
        confirm the container is running and get its name using `docker ps`
        CONTAINER_NAME="..."
        IP_ADDR=$(dcipaddr ${CONTAINER_NAME})
        sftp ${USERNAME}@${IP_ADDR}
        enter ${PASSWORD} when prompted
        ls, get etc.

    if you want other options e.g. logging in with SSH keys only etc., check out https://hub.docker.com/r/atmoz/sftp

---------------------------------------------------------------------------------------------------

Installing the Tela grub theme:
-------------------------------

This is needed only if you use grub as the bootloader. You'd use grub as the
bootloader only if EFI isn't supported (because otherwise you'd simply use
rEFInd).

1. Go to https://www.gnome-look.org/p/1307852/
1. Go to the `Files` tab and download `Tela-1080p.tar.xz`
1. extract Tela-1080p.tar.xz
1. cd Tela-1080p
1. sudo ./install.sh
1. reboot

---------------------------------------------------------------------------------------------------

## To give SSH access from outside the home network

1. Set up dyn-dns so the remote end doesn't need to always know the present
   public IP address
1. Enable port-forwarding on the router (SSH uses port 22)
1. Set up a guest account
1. sudo systemctl start sshd
1. Connect from outside using `ssh guest@<dyn-dns-domain>`

---------------------------------------------------------------------------------------------------

## Enabling port-forwarding on the router

1. Login to router
1. Left column -> Internet -> Freigaben
1. Click the button `Gerät für Freigaben hinzufügen`
1. If the device exists under `Gerät`, choose it and confirm the IP address; if
   it doesn't choose `IP Adresse manuell eingeben` and manually enter the IP
   address
1. Click the button `Neue Freigabe` on the bottom right
1. Under Anwendung, choose `Andere Anwendung`
1. Under Bezeichnung, enter `SSH`
1. Under Protokoll, choose `TCP`
1. Under Port an Gerät, enter von 22 bis 22
1. Under Port extern gewünscht, also enter 22
1. Confirm that `Freigabe aktivieren` is checked, and select
   `Internetzugriff über IPv4 und IPv6`
1. Click OK
1. Again click OK

---------------------------------------------------------------------------------------------------

## Accessing a hard-disk connected to the router

1. Login to router
1. Left column -> Heimnetz -> Speicher (NAS)
1. Under `Speicher (NAS) aktiv`, click on `USB-Speicher`
1. Click on the hard-disk folder (which should be the last entry on the page)

## To stream a video

1. Find the video you want to stream
1. Right-click -> Freigeben
1. Copy the download link
1. Open VLC media player
1. Media -> Open Network Stream
1. Paste the link
1. It may show some errors about invalid certificate, which you can safely
ignore
1. Enjoy

---------------------------------------------------------------------------------------------------

bash script confirmation:
-------------------------

empty means "No":
    read -p "Continue? (y/N): " YES_OR_NO
    [ -z "${YES_OR_NO}" ] || [[ "${YES_OR_NO}" != [yY] ]] && echo "Canceled." && exit 1

empty means "Yes":
    read -p "Continue? (Y/n): " YES_OR_NO
    if [ ! -z "${YES_OR_NO}" ]; then
        [[ "${YES_OR_NO}" != [yY] ]] && echo "Canceled." && exit 1
    fi

In zsh scripts, change `read -p "Continue? ...` to `read "?Continue? ...`
IOW, remove the `-p` option, and prefix a `?` to the prompt.

---------------------------------------------------------------------------------------------------

DEPRECATED: use `make update-dependency-files` instead
to apply go.mod/go.sum patches:
-------------------------------
1. Save the entire patch (without the ``` lines) to say `/tmp/patch.patch`
2. Remove the `.orig` extension from the file name in the first line of the patch
   ```
   ➜  sed -i '1 s/\.orig//g' /tmp/patch.patch
   ```
3. Go to the directory containing the go.mod/go.sum file and apply the patch
   ```
   ➜  patch < /tmp/patch.patch
   ```

---------------------------------------------------------------------------------------------------

truncating long strings in a Go program:
----------------------------------------
trunc := func(s string, max int) string {
    if len(s) <= max {
        return s
    }

    delta := len(s) - max
    suffix := "s"
    if delta == 1 {
        suffix = ""
    }

    // Note: The "plus N more characters" suffix that is added when truncating
    // the string causes the final string to not really respect the specified
    // maximum limit. This should be properly handled if this ever becomes a
    // first-class utility function.
    return fmt.Sprintf("%s <plus %d more character%s>", s[:max], delta, suffix)
}

str := "... a really long string ..."
truncateTo := 100
fmt.Println(trunc(str, truncateTo))

---------------------------------------------------------------------------------------------------

