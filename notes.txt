---------------------------------------------------------------------------------------------------

Additional softwares after a fresh Linux installation:

    super-boot-manager (http://www.sourceslist.eu/projects/super-boot-manager)
        sudo add-apt-repository ppa:ingalex/super-boot-manager
        sudo apt-get update
        sudo apt-get install super-boot-manager

---------------------------------------------------------------------------------------------------

running a simple HTTP server:
(http://www.linuxjournal.com/content/tech-tip-really-simple-http-server-python)
python -m SimpleHTTPServer

connect using: http://127.0.0.1:8000/tmp

---------------------------------------------------------------------------------------------------

Installing perl modules:
------------------------
Many perl scripts use modules (e.g. `use Archive::Ar;`). To install missing modules, use cpanm.
    - sudo apt-get install cpanminus
    - cpanm Archive::Ar
cpanm would normally automatically install all the dependencies also. Without 'sudo' installation
will happen to a directory in your home directory (e.g. /home/gautam/perl5).
Sometimes, installation fails (usually because some dependency could not be automatically
installed). In this case, find the dependency whose installation failed (using the log file whose
location would be helpfully indicated by cpanm) and install the dependency manually. For example, if
'Test::Exception' is a dependency whose automatic installation failed, then just run
    - cpanm Test::Exception
Then retry the original installation.

Finally, to run the perl script that was using the newly installed modules, you need to specify the
location of the newly installed modules using,
    - export PERL5LIB=/home/gautam/perl5/lib/perl5

---------------------------------------------------------------------------------------------------

To cut the last field (using space as delimiter):
    awk -F" " '{print $NF}'
        OR
    rev | cut -d" " -f1 | rev

---------------------------------------------------------------------------------------------------

Alternative way to do:
    for file in `ls`; do echo $file; done
is:
    ls | while read file; do echo $file; done

---------------------------------------------------------------------------------------------------

copy contents of a file into the clipboard:
-------------------------------------------
    ⁠⁠⁠⁠cat file | xclip -selection coard

---------------------------------------------------------------------------------------------------

list files with blank lines at the end:
---------------------------------------
    for F in `ls {src,test}/**/*.d`; do S=$(tail -1 ${F}); [ -z ${S} ] && echo ${F}; done

---------------------------------------------------------------------------------------------------

To get the sizes of files (without an overwhelming amount of output), use:
    du -ckhs *
    (I don't yet know the reason for the 'k', as 'du -chs *' seems to give the same output)

---------------------------------------------------------------------------------------------------

To get the amount of disk space used & free:
    df -hT | egrep -i "file|^/"

---------------------------------------------------------------------------------------------------

To grep for tabs in a file
    grep $'\t' <filename>

---------------------------------------------------------------------------------------------------

The output of 'echo' can be controlled by using certain "Terminfo Capabilities", e.g:
    prompt$> tput smso; echo "hello world"; tput rmso
(more here: http://tldp.org/LDP/lpg/node126.html)

---------------------------------------------------------------------------------------------------

To run a command at startup, there are 2 options:
    1. sudo crontab -e
       add the following in the end:
           @reboot <<command_to_run>>
      OR
    2. create a script file with your command
       make the script executable
       sudo /etc/rc.local
       path to your script at the end just above exit 0
So what's the difference?
    For the most part they're equivalent. The part where they differ is precisely when they run the
    command. /etc/rc.local is the last item to run, after all the other services have started.
    I don't yet know when @reboot runs.

---------------------------------------------------------------------------------------------------

[15:47:45] Nemanja Boric: btw, good thing for debugging: setarch i686 -R gdb ./program
[15:47:51] Nemanja Boric: removes address randomization

---------------------------------------------------------------------------------------------------

To cherry-pick all commits on a branch on top of another branch:
----------------------------------------------------------------

    Goal: cherry-pick source_branch commits over target_branch
          (i.e. commits Cy & Cz over commit C6)

               C6 o           => target_branch
                  |
               C5 o  o Cz     => source_branch
                  |  |
               C4 o  o Cy
                  |  |
               C3 o  o Cx     => some_intermediate_branch
                  |  |
               C2 o---
                  |
               C1 o

    1. git checkout target_branch
    2. git rebase --onto HEAD Cx source_branch
           (commit Cx will not be picked - only commits Cy & Cz will be picked and applied above
           commit C6)
           (if instead of source_branch, only the commit hash was used, i.e. Cz, then source_branch
           will not be moved from its original location)

---------------------------------------------------------------------------------------------------

Setting date from the command-line:
-----------------------------------
    sudo date MMDDHHMMYYYY.SS
              |     |
            month  minutes

---------------------------------------------------------------------------------------------------

Expandable GitHub comments:

<details>
  <summary>Click to expand</summary>
                                             <--- this blank line is necessary for proper formatting
  whatever
</details>

---------------------------------------------------------------------------------------------------

Installing a package on Arch Linux from AUR:
--------------------------------------------
    - download the package archive from AUR ("Download snapshot" link in the
      "Package Actions" box on the right)
    - extract the archive
    - cd to the extracted directory
    - makepkg -Acs
    - sudo pacman -U <tar.xz>

---------------------------------------------------------------------------------------------------

