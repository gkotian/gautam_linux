" Let Vundle manage all plugins
source ~/.vim/vundle.vim

" Automatically detect file types. (must turn on after Vundle)
filetype plugin indent on

" Set textwidth to 80 by default for all files
" (can be overridden in .vim/after/ftplugin/*.vim)
set tw=80

" Insert 4 spaces instead of tabs
set expandtab
set tabstop=4

" Enable auto-indentation
set autoindent

" Enable line numbers
"set number

" Enable incremental search
set incsearch

" Enable search highlighting
set hlsearch

" Enable case insensitive searching
set ignorecase

" Enable case-sensitive if search contains an uppercase character
" (valid only when 'ignorecase' is on)
set smartcase

" Set the shift width for indentations ('>>' & '<<')
set shiftwidth=4

" Set scroll offset to 'n' so that there are always 'n' lines above and below
" the cursor (the cursor will reach the top or bottom only at the beginning or
" end of the file respectively). Setting scroll offset to 999 will make the
" cursor always remain in the middle.
set scrolloff=3

" Options to format comments
set formatoptions=tcqor

" Turn on omni completion. This provides smart autocompletion for programs, so
" that when invoked, the text before the cursor is inspected to guess what might
" follow.
set omnifunc=syntaxcomplete#Complete

" Open new horizontal splits below.
" set splitbelow

" Open new vertical splits on the right.
" set splitright

" Instead of entering Ex mode (:help Q), make 'Q' turn off highlighting and
" clear any message already displayed.
nnoremap <silent> Q :nohlsearch<Bar>:echo<CR>

" Map F1 to save the current file
map <F1>  :w<CR>
imap <F1> <C-o>:w<CR>

" Map F2 to change to the previously opened file
map <F2>  :e#<CR>

" Map F3 to jump to tag
map <F3> <C-]>

" Map F4 to show/hide tags
nnoremap <silent> <F4> :TlistToggle<CR>

" Map F5 to show the list of buffers and also quickly open one
nnoremap <F5> :buffers<CR>:buffer<Space>

" Map function keys F7 & F8 to go to previous and next buffer respectively
map  <F7> :bp<CR>
imap <F7> <C-o>:bp<CR>
map  <F8> :bn<CR>
imap <F8> <C-o>:bn<CR>

" Map function keys F9 to F12 to play whatever has been recorded into 'q', 'w',
" 'e' & 'r' respectively
map <F9>  @q
map <F10> @w
map <F11> @e
map <F12> @r

" Map HOME key to jump to the first character in the line.
map <HOME> ^
imap <HOME> <C-o>^

" Map '\d' to show a quick diff of unsaved changes made in the current buffer
nnoremap <silent> <Leader>d :w !diff % -<CR>

" Map '\fh' to automatically insert a function header comment.
nmap <leader>fh i    /<ESC>75a*<ESC>o<CR>  TODO: Does what?<CR><CR>Params:<ESC>>>>>o    TODO<CR><CR><BS><BS><BS><BS>Returns:<CR>    TODO<CR><CR><ESC>i    <ESC>75a*<ESC>a/<ESC>

" Mappings for commonly used import statements
nmap <leader>ios oimport ocean.io.Stdout;<ESC>
nmap <leader>iot oimport ocean.transition;<ESC>

" Map '\l' to split a line and a keep a four-space indent over the preceding
" line. This is just a hack until I find a better syntax mapping.
nmap <leader>l i<CR><ESC><UP><HOME><DOWN>dw>>

" Map '\n' to toggle line numbers
nmap <leader>n :set invnumber<CR>

" Map '\o' to instantly obfuscate stuff
nmap <leader>o ggVGg?

" Map '\p' to toggle paste mode
nmap <leader>p :set invpaste paste?<CR>

" Map '\r' to refresh all open buffers
nmap <leader>r :windo e!<CR>

" Map '\sb' to show a bar at line length & '\hb' to remove it
" (sb => show bar, hb => hide bar)
nnoremap <silent> <Leader>sb :call ShowBar()<CR>
nnoremap <silent> <Leader>hb :set colorcolumn=<CR>

" Map '\t' to toggle display of invisible characters (tabs & newlines).
" Tabs are shown as '^I' & newlines are shown as '$'. To change this, or to
" display other invisible characters - :help listchars
" To change the display colour, tabs are represented by 'SpecialKey' and
" newlines by 'NonText' in the colorscheme file.
" (http://vimcasts.org/episodes/show-invisibles)
nmap <leader>t :set list!<CR>

" Map '\ul' to underline the current line
nmap <leader>ul YpVr-

" Map '\v' to open the vimrc
nmap <leader>v :e $MYVIMRC<CR>

" Map '\ws' to insert 'Stdout.formatln("'
nnoremap <Leader>ws iStdout.formatln("
inoremap <Leader>ws Stdout.formatln("

" Use my colorscheme
colorscheme googie_colors

" Augment existing editor commands.
" The "!" (bang attribute) after the keyword 'command' tells vim to redefine
" the command everytime vimrc is sourced. Otherwise the new command would get
" appended to list of existing commands.
command! RemoveMultipleBlankLines %s/^\_s\+\n/\r
command! RemoveTrailingWhiteSpace %s/\s\+$//

" Functions
source ~/.vim/functions.vim

" Auto commands.
source ~/.vim/autocmds.vim

" For the vim-startify plugin
source ~/.vim/vim-startify.vim

" For the NERDTree plugin
source ~/.vim/NERDTree.vim


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Navigation related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Move between split windows with Ctrl+Arrow instead of Ctrl+w+Arrow
nmap <silent> <C-Left>       :wincmd h<CR>
nmap <silent> <C-Down>       :wincmd j<CR>
nmap <silent> <C-Up>         :wincmd k<CR>
nmap <silent> <C-Right>      :wincmd l<CR>

imap <silent> <C-Left>  <C-o>:wincmd h<CR>
imap <silent> <C-Down>  <C-o>:wincmd j<CR>
imap <silent> <C-Up>    <C-o>:wincmd k<CR>
imap <silent> <C-Right> <C-o>:wincmd l<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Statusbar related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" 'laststatus' controls when the status bar is displayed
"     0 => never displayed
"     1 => displayed only when there is more than one window
"     2 => always displayed
set laststatus=2

" Control what is displayed on the status bar
"     %t => only the file name
"     %m => file modified flag
"     %r => read only flag
"     %n => buffer number
"     %= => left/right separator
"     %l => cursor line number
"     %L => total number of lines
"     %c => cursor column
"
"     %{strlen(&fenc)?&fenc:'none'} => file encoding
"     %{&ff}                        => file format
"
" For more, :help statusline

set statusline=%t%m%r\ %{fugitive#statusline()}\ [b%n]%=[line\ %l\ of\ %L,\ col\ %c]

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Search visually selected text using '*' or '#'
" (http://vim.wikia.com/wiki/Search_for_visually_selected_text)
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
vnoremap <silent> * :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy/<C-R><C-R>=substitute(escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>

vnoremap <silent> # :<C-U>
    \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
    \gvy?<C-R><C-R>=substitute(escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
    \gV:call setreg('"', old_reg, old_regtype)<CR>
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""


""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" fzf related
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Map '\\' to open the fzf file chooser
nnoremap <silent> <Leader>\ :FZF<CR>

" Map '\b' to show open buffers using fzf.vim
nnoremap <silent> <leader>b :Buffers<CR>

" Map '\h' to show files from history
nnoremap <silent> <Leader>h :History<CR>

" Map '\m' to show current used mappings in vim
nnoremap <silent> <Leader>m :Maps<CR>

" Add fzf to the runtimepath
set rtp+=~/.fzf
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Temporary
